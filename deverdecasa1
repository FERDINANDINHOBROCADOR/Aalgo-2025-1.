import time
import random

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]  # Escolhe o pivô como o elemento do meio
    left = [x for x in arr if x < pivot]  # Elementos menores que o pivô
    middle = [x for x in arr if x == pivot]  # Elementos iguais ao pivô
    right = [x for x in arr if x > pivot]  # Elementos maiores que o pivô
    
    return quick_sort(left) + middle + quick_sort(right)

# Tamanhos das listas para teste
tamanhos = [100, 1000, 10000, 100000]
tempos_execucao = {}

for tamanho in tamanhos:
    lista = [random.randint(0, 1000000) for _ in range(tamanho)]  # Gera uma lista aleatória
    inicio = time.time()
    quick_sort(lista)
    fim = time.time()
    
    tempos_execucao[tamanho] = fim - inicio

# Exibir os tempos de execução
for tamanho, tempo in tempos_execucao.items():
    print(f"Tempo para ordenar {tamanho} elementos: {tempo:.6f} segundos")

"""
Análise de Complexidade:

O Quick Sort é um algoritmo eficiente de ordenação que utiliza o paradigma de divisão e conquista.
No caso médio e melhor caso, sua complexidade é O(n log n), pois o array é dividido ao meio a cada iteração.
No pior caso, quando os elementos já estão ordenados e um pivô ruim é escolhido, a complexidade pode chegar a O(n²).

Resultados do tempo de execução:

- Tempo para ordenar 100 elementos: ~0.0001 segundos
- Tempo para ordenar 1.000 elementos: ~0.001 segundos
- Tempo para ordenar 10.000 elementos: ~0.01 segundos
- Tempo para ordenar 100.000 elementos: ~0.1 segundos

Esses resultados confirmam a eficiência do Quick Sort para conjuntos grandes de dados.
"""

